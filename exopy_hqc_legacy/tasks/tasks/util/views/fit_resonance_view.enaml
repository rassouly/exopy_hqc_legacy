# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2016 by EcpyHqcLegacy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""View of the task used to load a file in memory.

"""
import traceback
from inspect import cleandoc

from atom.api import (Typed, Value, List, Str, Dict, Tuple, set_default)
from enaml.widgets.api import (GroupBox, PushButton, Container, Label, Field,
                               FileDialog, ObjectCombo, CheckBox,
                               ToolButton, PopupView, MultilineField)
from enaml.stdlib.fields import FloatField, IntField
from enaml.workbench.core.core_plugin import CorePlugin
from enaml.core.api import Include, d_
from enaml.layout.api import hbox, align, grid
from enaml.stdlib.message_box import warning

from exopy.tasks.api import (BaseTaskView, 
                             EVALUATER_TOOLTIP, FORMATTER_TOOLTIP)
from exopy.utils.widgets.qt_completers import QtLineCompleter


class BaseFitView(BaseTaskView):
    """ Base class for fit task views handling the interface selection.

    """
    #: List of formats for which an interface is declared.
    array_format = d_(List(Str()))

    #: References to the currently instantiated interface views.
    i_views = Tuple(default=())

    def initialize(self):
        """Overridden to get the known interfaces.

        """
        super(BaseFitView, self).initialize()

        interfaces = self.root.get_interfaces_for(self.task)

        array_format = []
        f_interfaces = {}
        # Get the array formats and map them to their interface.
        for i_infos in interfaces.values():
            formats = i_infos.cls.array_format
            array_format.extend(formats)
            f_interfaces.update({f: i_infos.cls for f in formats})
        self.array_format = array_format
        self._f_interfaces = f_interfaces

        if self.task.interface:
            self._insert_interface_views(self.task.interface)

        self._bind_observers()

    def destroy(self):
        """ Overriden destroyer to remove observers.

        """
        self._unbind_observers()
        super(BaseFitView, self).destroy()

    # --- Private API ---------------------------------------------------------

    #: Mapping between formats and interfaces
    _f_interfaces = Dict()

    def _update_interface(self, change):
        """Update the interface when the selected format change.

        """
        f_format = change['value']
        interface = self._f_interfaces[f_format]

        if not isinstance(self.task.interface, interface):
            # Destroy the views associated with the ancient interface.
            for i_v in self.i_views:
                i_v.destroy()
            # If no interface is used simply assign None
            if type(None) == interface:
                self.task.interface = None
                return
            # Otherwise create interface and insert its views.
            self.task.interface = interface()

            self._insert_interface_views(self.task.interface, )

    def _insert_interface_views(self, interface):
        """Insert the views associated with the selected interface.

        """
        i_views = self.root.view_for(interface)
        if i_views:
            # TODO handle more complex insertions.
            if hasattr(i_views[0], 'index'):
                self.insert_children(i_views[0].index, i_views)
            else:
                self.insert_children(None, i_views)

            self.i_views = tuple(i_views)

        else:
            self.i_views = ()

    def _bind_observers(self):
        """ Bind the observers at widget initialisation.

        """
        self.task.observe('selected_format', self._update_interface)

    def _unbind_observers(self):
        """ Undind the observers at widget destruction.

        """
        self.task.unobserve('selected_format', self._update_interface)


enamldef FitResonanceView(BaseFitView): main:
    """Actual view of the fit resonance task.

    """
    GroupBox: array:
        title = 'Array'
        constraints << [grid([arr_lab, ref_lab, use_ref_lab, type_lab],
                             [arr_val, ref_val, use_ref_val, type_val])]

        Label: arr_lab:
            text = 'Target array'
        QtLineCompleter: arr_val:
            hug_width = 'ignore'
            text := task.target_array
            entries_updater << task.list_accessible_database_entries
            tool_tip = EVALUATER_TOOLTIP

        Label: ref_lab:
            text = 'Ref array'
        QtLineCompleter: ref_val:
            hug_width = 'ignore'
            text := task.ref_array
            entries_updater << task.list_accessible_database_entries
            tool_tip = EVALUATER_TOOLTIP

        Label: use_ref_lab:
            text = 'Use ref'
        CheckBox: use_ref_val:
            checked := task.use_ref

        Label: type_lab:
            text = 'Data type'
        ObjectCombo: type_val:
            items = main.array_format
            selected := task.selected_format

    Include:
        objects << list(i_views)

enamldef FitVNAInterfaceView(Container):
    """View for the VNA interface

    """
    #: Reference to the interface.
    attr interface

    #: Reference to the root view.
    attr root

    constraints << [grid([col_lab1, col_lab2, col_lab3, mod_lab],
                         [col_val1, col_val2, col_val3, mod_val])]

    Label: col_lab1:
        text = 'Column name freq'
    Field: col_val1:
        hug_width = 'ignore'
        text := interface.column_name_freq

    Label: col_lab2:
        text = 'Column name maglin'
    Field: col_val2:
        hug_width = 'ignore'
        text := interface.column_name_maglin

    Label: col_lab3:
        text = 'Column name phase'
    Field: col_val3:
        hug_width = 'ignore'
        text := interface.column_name_phase

    Label: mod_lab:
        text = 'Mode'
    ObjectCombo: mod_val:
        items = list(interface.get_member('mode').items)
        selected := interface.mode

enamldef FitAlazarInterfaceView(Container):
    """View for the VNA interface

    """
    #: Reference to the interface.
    attr interface

    #: Reference to the root view.
    attr root

    constraints << [grid([col_lab1, col_lab2, col_lab3, delay_lab, mod_lab],
                         [col_val1, col_val2, col_val3, delay_val, mod_val])]

    Label: col_lab1:
        text = 'Column name freq'
    Field: col_val1:
        hug_width = 'ignore'
        text := interface.column_name_freq

    Label: col_lab2:
        text = 'Column name Icor'
    Field: col_val2:
        hug_width = 'ignore'
        text := interface.column_name_Icor

    Label: col_lab3:
        text = 'Column name Qcor'
    Field: col_val3:
        hug_width = 'ignore'
        text := interface.column_name_Qcor

    Label: delay_lab:
        text = 'Time delay (ns)'
    Field: delay_val:
        hug_width = 'ignore'
        text := interface.Tdelay

    Label: mod_lab:
        text = 'Mode'
    ObjectCombo: mod_val:
        items = list(interface.get_member('mode').items)
        selected := interface.mode
